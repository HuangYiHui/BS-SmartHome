package bs.pi.gateway.client.zigbee;

import java.util.HashMap;

import bs.pi.gateway.client.port.PortConverter;
import bs.pi.gateway.main.IConverter;

public class ZigbeeConverter implements IConverter {

	@Override
	public HashMap<String, Object> convertMsgReceive(HashMap<String, Object> msg) {
		if(msg == null)
			return null;
		
		if( ! PortConverter.KEY_MSG_TYPE.equals(msg.get(PortConverter.MSG_TYPE_PORT_MSG))){
				return null;
		}
		
		if( ! msg.containsKey(PortConverter.KEY_CMD0) || msg.containsKey(PortConverter.KEY_CMD1))
			return null;
		
		byte cmd0 = (byte) msg.get(PortConverter.KEY_CMD0);
		byte cmd1 = (byte) msg.get(PortConverter.KEY_CMD1);
		byte[] data = (byte[]) msg.get(PortConverter.KEY_DATA);
		
		if(cmd0 == 0x44 && cmd1 == 0x81){
			if(data == null || data.length == 0)
				return null;
			byte cmd3 = data[17];
			byte cmd4 = data[18];
			if(cmd3 == 0x00 && cmd4 == 0x01){
				byte len = data[16];
				byte[] data1 = new byte[len-2];
				System.arraycopy(data, 19, data1, 0, len-2);
				return dataUplaodToHttpServer(data1);
			}
		}else{
			return null;
		}
	}
	
	private HashMap<String, Object> dataUplaodToHttpServer(byte[] data){
		int sensorID = b1*256 + b2;
		return null;
	}

	@Override
	public HashMap<String, Object> convertMsgSend(HashMap<String, Object> msg) {
		// TODO Auto-generated method stub
		return null;
	}
	
}
