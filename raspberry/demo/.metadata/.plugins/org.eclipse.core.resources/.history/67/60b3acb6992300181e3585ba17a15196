package bs.pi.gateway.processor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import bs.pi.gateway.client.zigbee.ZigbeeConverter;
import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.ISender;

public class MyProcessor implements IProcessor {

	private ArrayList<ISender> senderList;
	private ArrayList<HashMap<String, Object>> msgList;
	private Thread processThread = new Thread(new Runnable() {
		@Override
		public void run() {
			while( ! processThread.isInterrupted()){
				HashMap<String, Object> msg = nextMsg();
				if(msg != null)
					process(msg);
			}
		}
	});
	
	public MyProcessor(){
		msgList = new ArrayList<HashMap<String, Object>>();
	}
	
	@Override
	public void setSenders(ArrayList<ISender> senderList) {
		this.senderList = senderList;
	}

	@Override
	public void handleEvent(HashMap<String, Object> msg) {
		if(msg != null){
			synchronized (msgList) {
				msgList.add((HashMap<String, Object>) msg.clone());
				msgList.notifyAll();
			}
		}
	}
	
	@Override
	public void start(){
		processThread.start();
	}
	
	@Override
	public void stop(){
		//ÈÃnextMsgÄÜÍË³ö
		msgList.notifyAll();
		
		processThread.interrupt();
	}
	
	private HashMap<String, Object> nextMsg(){
		HashMap<String, Object> msg = null;
		synchronized (msgList) {
			if(msgList.size() == 0){
				try {
					msgList.wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			if(msgList.size() > 0)
				msg = msgList.remove(0);
			msgList.notifyAll();
		}
		return msg;
	}
	
	private void process(HashMap<String, Object> msg){
		
		System.out.println("------msg--start-----");
		System.out.println(msg.get(AppMsg.KEY_CMD));
		System.out.println(msg.get(AppMsg.KEY_SENSOR_ID));
		float f = (float) msg.get(AppMsg.KEY_SENSOR_VALUE);
		System.out.printf("%f\n",f);
		System.out.println("------msg--end-----");
		
		if(AppMsg.CMD_UPLOAD_DATA_TO_HTTP_SERVER.equals(msg.get(AppMsg.KEY_CMD))){
			
		}
	}
}
