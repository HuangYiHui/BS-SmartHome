package bs.pi.gateway.client.http;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;

import com.test.Debugger;

import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;

public class HttpConverter implements IConverter {

	public final static String K_HTTP_URL = "Url";
	public final static String K_HTTP_METHOD = "Method";
	public final static String K_HTTP_APIKEY = "APIKey";
	public final static String K_HTTP_PARAMS = "Params";
	public final static String K_HTTP_VALUE = "value";
	
	public final static String V_HTTP_METHOD_GET = "Get";
	public final static String V_HTTP_METHOD_POST = "Post";
	public final static String V_HTTP_METHOD_PUT = "Put";
	public final static String V_HTTP_METHOD_DELETE = "Delete";
	
	private HttpClientCfg cfg;
	
	public void setHttpClientCfg(HttpClientCfg cfg){
		this.cfg = cfg;
	}
	
	@Override
	public HashMap<String, Object> convertMsgReceive(HashMap<String, Object> msg) {
		HashMap<String, Object> result = new HashMap<String, Object>();
		if(msg == null){
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
		//获取设备命令回复
		if(HttpMsg.V_CMD_NAME_GET_DEVICE_CMD.equals(msg.get(HttpMsg.K_CMD_NAME))){
			//获取成功
			if(HttpReceiver.VALUE_TRUE == (boolean) msg.get(HttpReceiver.KEY_SUCCESS)){
				result.put(AppMsg.K_CMD_NAME, AppMsg.CMD_HTTP_DEVICE_CMD);
				String cmdStr = (String) msg.get(HttpReceiver.KEY_MSG);
				JSONObject JsonCmd = JSONObject.fromObject(cmdStr.substring(1, cmdStr.length()-1));
				result.put(AppMsg.K_APP_ID, JsonCmd.getString(HttpReceiver.KEY_APPID));
				result.put(AppMsg.K_HTTP_DEVICE_CMD, JsonCmd.getString(HttpReceiver.KEY_DEVICE_CMD));
				result.put(AppMsg.K_HTTP_DEVICE_CMD_PARAMS, JsonCmd.getString(HttpReceiver.KEY_CMD_PARAMS));
				return result;
			}
		}else{//不支持的或未知的命令
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
	}

	@Override
	public HashMap<String, Object> convertMsgSend(HashMap<String, Object> msg) {
		if(msg == null)
			return null;
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		
		if(AppMsg.CMD_UPLOAD_DATA_TO_HTTP_SERVER.equals(msg.get(AppMsg.K_CMD_NAME))){
			int sensorID = (int) msg.get(AppMsg.K_SENSOR_ID);
			float sensorValue = (float) msg.get(AppMsg.K_SENSOR_VALUE);
			String url = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/sensor/"+sensorID+"/datapoint";
			List<NameValuePair> params = new ArrayList<NameValuePair>();
			params.add(new BasicNameValuePair(K_HTTP_VALUE, ""+sensorValue));
			
			result.put(K_HTTP_URL, url);
			result.put(K_HTTP_METHOD, V_HTTP_METHOD_POST);
			result.put(K_HTTP_APIKEY, cfg.getApiKey());
			result.put(K_HTTP_PARAMS, new UrlEncodedFormEntity(params, Consts.UTF_8));
			
			return result;
		}else{
			return null;
		}
	}
}
