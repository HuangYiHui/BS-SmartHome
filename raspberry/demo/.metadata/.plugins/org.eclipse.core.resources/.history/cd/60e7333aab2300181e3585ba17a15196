package bs.pi.gateway.client.http;

import java.net.URI;
import java.util.HashMap;

import org.apache.http.annotation.NotThreadSafe;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.util.EntityUtils;

import bs.pi.gateway.client.http.HttpSender.HttpDeleteWithBody;
import bs.pi.gateway.main.AppMsg;

public class HttpExecuter {
	
	public final static String METHOD_GET = "Get";
	public final static String METHOD_POST = "Post";
	public final static String METHOD_PUT = "Put";
	public final static String METHOD_DELETE = "Delete";
	
	private String url;
	private String method;
	private String apiKey;
	private UrlEncodedFormEntity params;
	
	HttpExecuter(String url, String apiKey, String method, UrlEncodedFormEntity params){
		this.url = url;
		this.apiKey = apiKey;
		this.params = params;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String getApiKey() {
		return apiKey;
	}

	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
	}

	public UrlEncodedFormEntity getParams() {
		return params;
	}

	public void setParams(UrlEncodedFormEntity params) {
		this.params = params;
	}

	public String getMethod() {
		return method;
	}

	public void setMethod(String method) {
		this.method = method;
	}
	
	public HashMap<String, Object> execute() throws Exception{
		
		HttpUriRequest request = null;
		
		if(METHOD_GET.equals(method)){
			request = getGetRequest();
		}else if(METHOD_POST.equals(method)){
			request = getPostRequest();
		}else if(METHOD_POST.equals(method)){
			request = getPutRequest();
		}else if(METHOD_POST.equals(method)){
			request = getDeleteRequest();
		}else{
			throw new Exception("illegal request mothod");
		}
	}
	
	private HttpUriRequest getGetRequest() throws Exception{
		String paramStr = "";
		if(params != null){
			paramStr = EntityUtils.toString(params);
		}
		HttpGet httpGet = new HttpGet(url+"?"+paramStr);
		httpGet.addHeader("APIKEY", apiKey);
		return httpGet;
	}
	
	private HttpUriRequest getPostRequest() throws Exception{
		HttpPost httpPost = new HttpPost(url);
		httpPost.addHeader("APIKEY", apiKey);
		if(params != null){
			httpPost.setEntity(params);
		}
		return httpPost;
	}
	
	private HttpUriRequest getPutRequest() throws Exception{
		HttpPut httpPut = new HttpPut(url);
		httpPut.addHeader("APIKEY", apiKey);
		if(params != null){
			httpPut.setEntity(params);
		}
		
		return httpPut;
	}
	
	private HttpUriRequest getDeleteRequest() throws Exception{
		HttpDeleteWithBody httpDelete = new HttpDeleteWithBody(url);
		httpDelete.addHeader("APIKEY", apiKey);
		if(params != null){
			httpDelete.setEntity(params);
		}
		return httpDelete;
	}
	
	@NotThreadSafe
	public class HttpDeleteWithBody extends HttpEntityEnclosingRequestBase {
	    public static final String METHOD_NAME = "DELETE";
	    public String getMethod() { return METHOD_NAME; }
	    public HttpDeleteWithBody(final String uri) {
	        super();
	        setURI(URI.create(uri));
	    }
	    public HttpDeleteWithBody(final URI uri) {
	        super();
	        setURI(uri);
	    }
	    public HttpDeleteWithBody() { super(); }
	}
}
