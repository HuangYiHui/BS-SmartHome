package bs.pi.gateway.client.http;

import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.annotation.NotThreadSafe;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.main.ISender;

public class HttpSender implements ISender {

	public final static String NAME = "HttpSender";
	
	private IConverter converter;
	private HttpClientCfg cfg;
	private String url;
	private String apiKey;
	private UrlEncodedFormEntity params;
	
	public HttpSender(HttpClientCfg cfg, IConverter converter){
		this.cfg = cfg;
		this.converter = converter;
	}
	
	@Override
	public String getName() {
		return NAME;
	}

	@Override
	public HashMap<String, Object> send(HashMap<String, Object> msg) throws Exception {
		if(msg == null)
			return null;
		HashMap<String, Object> msg1 = converter.convertMsgSend(msg);
		if(msg1 == null)
			return null;
		
		url = (String) msg.get(HttpConverter.KEY_HTTP_URL);
		apiKey = (String) msg.get(HttpConverter.KEY_HTTP_APIKEY);
		params = (UrlEncodedFormEntity) msg.get(HttpConverter.KEY_HTTP_PARAMS);
		
		if(HttpConverter.VALUE_HTTP_METHOD_GET.equals(msg1.get(HttpConverter.KEY_HTTP_METHOD))){
			return doGet();
		}else if(HttpConverter.VALUE_HTTP_METHOD_POST.equals(msg1.get(HttpConverter.KEY_HTTP_METHOD))){
			return doPost();
		}else if(HttpConverter.VALUE_HTTP_METHOD_PUT.equals(msg1.get(HttpConverter.KEY_HTTP_METHOD))){
			return doPut();
		}else if(HttpConverter.VALUE_HTTP_METHOD_DELETE.equals(msg1.get(HttpConverter.KEY_HTTP_METHOD))){
			return doDelete();
		}
		
		return null;
	}
	
	private HashMap<String, Object> execute(HttpUriRequest request){
		
		CloseableHttpClient httpClient = HttpClients.createDefault();
		CloseableHttpResponse response = null;
		JSONObject jsonResponse = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		result.put(AppMsg.KEY_CMD, AppMsg.CMD_UPLOAD_DATA_TO_HTTP_SERVER_RESPONSE);
		
		try{
			response = httpClient.execute(request);
			try {
				jsonResponse = JSONObject.fromObject(EntityUtils.toString(response.getEntity()));
            } finally {
                response.close();
            }
		}catch(Exception e){
			e.printStackTrace();
			result.put(AppMsg.KEY_HTTP_SUCESS, AppMsg.VALUE_HTTP_EXCEPTION);
			result.put(AppMsg.KEY_HTTP_MSG, e);
		}finally{
			try {
				httpClient.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		if(result != null){
			Set<Map.Entry<String, Object>> resultSet = result.entrySet();
			for(Map.Entry<String, Object> entry : resultSet){
				result.put(entry.getKey(), entry.getValue());
			}
		}
		
		return result;
	}

	private HashMap<String, Object> doGet(){
		String paramStr = "";
		if(params != null){
			try {
				paramStr = EntityUtils.toString(params);
			} catch (Exception e) {
				e.printStackTrace();
				HashMap<String, Object> result = new HashMap<String, Object>();
			}
		}
		HttpGet httpGet = new HttpGet(url+"?"+paramStr);
		httpGet.addHeader("APIKEY", apiKey);
		return execute(httpGet);
	}
	
	private HashMap<String, Object> doPost(){
		HttpPost httpPost = new HttpPost(url);
		httpPost.addHeader("APIKEY", cfg.getApiKey());
		if(params != null){
			httpPost.setEntity(params);
		}
		
		return execute(httpPost);
	}

	private HashMap<String, Object> doPut(){
		HttpPut httpPut = new HttpPut(url);
		httpPut.addHeader("APIKEY", cfg.getApiKey());
		if(params != null){
			httpPut.setEntity(params);
		}
		
		return execute(httpPut);
	}
	
	private HashMap<String, Object> doDelete(){		
		HttpDeleteWithBody httpDelete = new HttpDeleteWithBody(url);
		httpDelete.addHeader("APIKEY", cfg.getApiKey());
		if(params != null){
			httpDelete.setEntity(params);
		}
		
		return execute(httpDelete);
	}
	
	@NotThreadSafe
	public class HttpDeleteWithBody extends HttpEntityEnclosingRequestBase {
	    public static final String METHOD_NAME = "DELETE";
	    public String getMethod() { return METHOD_NAME; }
	    public HttpDeleteWithBody(final String uri) {
	        super();
	        setURI(URI.create(uri));
	    }
	    public HttpDeleteWithBody(final URI uri) {
	        super();
	        setURI(uri);
	    }
	    public HttpDeleteWithBody() { super(); }
	}

}
