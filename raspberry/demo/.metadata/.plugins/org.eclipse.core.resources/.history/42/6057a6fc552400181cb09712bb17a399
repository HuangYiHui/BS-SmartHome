package bs.pi.gateway.client.http;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;

import com.test.Debugger;

import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;

public class HttpConverter implements IConverter {	
	private HttpClientCfg cfg;
	
	public void setHttpClientCfg(HttpClientCfg cfg){
		this.cfg = cfg;
	}
	
	@Override
	public HashMap<String, Object> convertMsgReceive(HashMap<String, Object> msg) {
		HashMap<String, Object> result = new HashMap<String, Object>();
		if(msg == null){
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
		//获取设备命令回复
		if(HttpMsg.V_CMD_NAME_GET_DEVICE_CMD.equals(msg.get(HttpMsg.K_CMD_NAME))){
			//获取成功
			if(HttpMsg.V_SUCCESS_TRUE == (boolean) msg.get(HttpMsg.K_SUCCESS)){
				result.put(AppMsg.K_CMD_NAME, AppMsg.CMD_HTTP_DEVICE_CMD);
				String cmdStr = (String) msg.get(HttpMsg.K_MSG);
				JSONObject JsonCmd = JSONObject.fromObject(cmdStr.substring(1, cmdStr.length()-1));
				result.put(AppMsg.K_APP_ID, JsonCmd.getString(HttpMsg.K_APP_ID));
				result.put(AppMsg.K_HTTP_DEVICE_CMD, JsonCmd.getString(HttpMsg.K_DEVICE_CMD));
				JSONObject jsonParam = JSONObject.fromObject(JsonCmd.getString(HttpMsg.K_CMD_PARAMS));
				result.put(AppMsg.K_HTTP_DEVICE_CMD_PARAMS, jsonParam);
			}else{
				result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			}
			
			return result;
			
		}else{//不支持的或未知的命令
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
	}

	@Override
	public HashMap<String, Object> convertMsgSend(HashMap<String, Object> msg) {
		if(msg == null)
			return null;
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		
		if(AppMsg.V_CMD_NAME_UPLOAD_DATA_TO_HTTP_SERVER.equals(msg.get(AppMsg.K_CMD_NAME))){
			int sensorID = (int) msg.get(AppMsg.K_SENSOR_ID);
			float sensorValue = (float) msg.get(AppMsg.K_SENSOR_VALUE);
			String url = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/sensor/"+sensorID+"/datapoint";
			List<NameValuePair> paramList = new ArrayList<NameValuePair>();
			paramList.add(new BasicNameValuePair(HttpMsg.K_VALUE, ""+sensorValue));
			UrlEncodedFormEntity params = new UrlEncodedFormEntity(paramList, Consts.UTF_8);
			
			result.put(HttpMsg.K_URL, url);
			result.put(HttpMsg.K_METHOD, HttpMsg.V_METHOD_POST);
			result.put(HttpMsg.K_APIKEY, cfg.getApiKey());
			result.put(HttpMsg.K_PARAMS, params);
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_SUCCESS);
		}else{
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
		}
		
		return result;
	}
}
