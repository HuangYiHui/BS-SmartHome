package bs.pi.gateway.client.http;

import java.util.ArrayList;

import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.main.IReceivedListener;
import bs.pi.gateway.main.IReceiver;
import bs.pi.gateway.msg.IMsg;

public class HttpReceiver implements IReceiver {
	
	private ArrayList<IReceivedListener> receivedListenerList;
	private HttpClientCfg cfg;
	private IConverter converter;
	private HttpSender sender;
	private Thread rTread = new Thread(new Runnable() {
		@Override
		public void run() {
			while( ! rTread.isInterrupted()){
				if(converter != null && receivedListenerList != null && receivedListenerList.size()>0){
					String url = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/command";
					HttpExecuter executer = new HttpExecuter(url, HttpMsgSend.METHOD_GET, cfg.getApiKey(), null);
					HttpMsgReceive httpMsgReceive = executer.execute();
					if(httpMsgReceive != null){
						httpMsgReceive.setType(HttpMsgReceive.TYPE_DEVICE_CMD);
						
						//删除命令
						String url1 = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/command";
						HttpExecuter executer1 = new HttpExecuter(url1, HttpMsgSend.METHOD_DELETE, cfg.getApiKey(), null);
						executer1.execute();
						
						System.out.println("delete");
					}
					IMsg msg = converter.convertMsgReceive(httpMsgReceive);
					if(msg != null){
						for(IReceivedListener listener : receivedListenerList){
							listener.handleEvent(msg);
						}
					}
				}
				
				try {
					Thread.sleep(cfg.getGetCmdTaskInterval());
				} catch (InterruptedException e) {
					//出现异常，可能是执行了stop方法，打断了休眠，这里直接退出线程
					break;
				}
			}
		}
	});
	
	public HttpReceiver(HttpClientCfg cfg, IConverter converter){
		this.cfg = cfg;
		this.converter = converter;
	}
	@Override
	public void addReceivedListenr(IReceivedListener listener) {
		// TODO Auto-generated method stub
		if(listener == null)
			return;
		if(receivedListenerList == null)
			receivedListenerList = new ArrayList<IReceivedListener>();
		receivedListenerList.add(listener);
	}

	@Override
	public void start() {
		flush();
		rTread.start();
	}

	@Override
	public void stop() {
		// TODO Auto-generated method stub
		rTread.interrupt();
	}

	@Override
	public void flush() {

	}

}
