package bs.pi.gateway.client.http;

import java.util.HashMap;

import org.apache.http.client.entity.UrlEncodedFormEntity;

import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.main.ISender;

public class HttpSender implements ISender {

	public final static String NAME = "HttpSender";
	
	private IConverter converter;
	private HttpClientCfg cfg;
	private String url;
	private String apiKey;
	private UrlEncodedFormEntity params;
	
	public HttpSender(HttpClientCfg cfg, IConverter converter){
		this.cfg = cfg;
		this.converter = converter;
	}
	
	@Override
	public String getName() {
		return NAME;
	}

	@Override
	public HashMap<String, Object> send(HashMap<String, Object> msg) throws Exception {
		if(msg == null)
			return null;
		HashMap<String, Object> msg1 = converter.convertMsgSend(msg);
		if(msg1 == null)
			return null;
		
		 
		url = (String) msg1.get(HttpConverter.K_HTTP_URL);
		apiKey = (String) msg1.get(HttpConverter.K_HTTP_APIKEY);
		params = (UrlEncodedFormEntity) msg1.get(HttpConverter.K_HTTP_PARAMS);
		String method = "";
		if(HttpConverter.V_HTTP_METHOD_GET.equals(msg1.get(HttpConverter.K_HTTP_METHOD))){
			method = HttpExecuter.METHOD_GET;
		}else if(HttpConverter.V_HTTP_METHOD_POST.equals(msg1.get(HttpConverter.K_HTTP_METHOD))){
			method = HttpExecuter.METHOD_POST;
		}else if(HttpConverter.V_HTTP_METHOD_PUT.equals(msg1.get(HttpConverter.K_HTTP_METHOD))){
			method = HttpExecuter.METHOD_PUT;
		}else if(HttpConverter.V_HTTP_METHOD_DELETE.equals(msg1.get(HttpConverter.K_HTTP_METHOD))){
			method = HttpExecuter.METHOD_DELETE;
		}else{
			return null;
		}
		
		HttpExecuter executer = new HttpExecuter(url, method, apiKey, params);
		return executer.execute();
	}
}
