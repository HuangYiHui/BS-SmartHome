package bs.pi.gateway.client.zigbee;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import com.test.Debugger;

import bs.pi.gateway.assist.Tool;
import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.msg.IMsg;
import bs.pi.gateway.msg.OtherZigbeeConnectedMsg;
import bs.pi.gateway.msg.OutSensorValuesComingMsg;
import bs.pi.gateway.msg.PortMsgReceivedMsg;
import bs.pi.gateway.msg.QueryZigbeeIsOnlineMsg;
import bs.pi.gateway.msg.ResponseToZigbeeOnlineQueryMsg;
import bs.pi.gateway.msg.SendMsgToAppMsg;
import bs.pi.gateway.msg.UploadDataToHttpServerMsg;

public class ZigbeeConverter implements IConverter {
	
	
	private final short CMD_UPLAOD_DATA = 0x0001;
	//这里的UPLOAD_DATA_INDEX要与arduino的对应
	private final short UPLOAD_DATA_INDEX_SENSOR_VALUE = 0x0001;
	private final short CMD_QUERY_IS_ONLINE = 0x0003;
	private final short CMD_RESPONSE_ONLINE = 0x0004;
	private final short CMD_SEND_MSG_TO_APP = 0x0005;
	
	private final short CMD_OUT_SENSOR_VALUES_COMING = 0x0004;
	
	//室内设备， 设备ID要与SmarHomeIn的SystemCfg.h中的设备ID一致
	private final short DEVICE_ID_IN_ZIGBEE				= 0x0030;
	private final short DEVICE_ID_IN_DHT11				= 0x0031;
	private final short DEVICE_ID_IN_TEMPERATURE_SENSOR	= 0x0032;
	private final short DEVICE_ID_IN_HUMIDITY_SENSOR	= 0x0033;
	private final short DEVICE_ID_IN_HEAT_SENSOR		= 0x0034;
	private final short DEVICE_ID_HARMFUL_GAS_SENSOR	= 0x0035;
	private final short DEVICE_ID_SWITCH1				= 0x0036;
	private final short DEVICE_ID_SWITCH2				= 0x0037;
	private final short DEVICE_ID_SWITCH3				= 0x0038;
	private final short DEVICE_ID_SWITCH4				= 0x0039;
	private final short DEVICE_ID_LCD					= 0x003a;
	private final short DEVICE_ID_ALARM					= 0x003b;
	private final short DEVICE_ID_FIRE_SENSOR			= 0x003c;
	private final short DEVICE_ID_IR_REMOTE				= 0x003d;
	
	//室外设备， 设备ID要与SmarHomeOut的SystemCfg.h中的设备ID一致
	private final short DEVICE_ID_OUT_TEMPERATURE_SENSOR	= 0x0092;
	private final short DEVICE_ID_OUT_HUMIDITY_SENSOR		= 0x0093;
	private final short DEVICE_ID_OUT_HEAT_SENSOR			= 0x0094;
	private final short DEVICE_ID_SOLID_HUMIDITY_SENSOR		= 0x0095;
	private final short DEVICE_ID_DUST_DENSITY_SENSOR		= 0x0096;
	private final short DEVICE_ID_LIGHT_INTENSITY_SENSOR	= 0x0097;
	
	private final short APP_ID_ZIGBEE = 0x0030;
	private final short APP_ID_SENSOR = 0x0031;
	private final short APP_ID_DANGER_ALARM = 0x0032;
	private final short APP_ID_SWITCHS = 0x0033;
	private final short APP_ID_IRREMOTE = 0x0034;
	private final short APP_ID_LCD = 0x0035;
	
	private byte[] dstAddr1;
	private byte[] dstAddr2;
	private ZigbeeClientCfg cfg;
	
	public ZigbeeConverter(ZigbeeClientCfg cfg){
		this.cfg = cfg;
	}
	
	@Override
	public IMsg convertMsgReceive(Object msg) {
		if(msg ==null)
			return null;
		
		ZigbeeMsgReceive zigbeeMsgReceive = null;
		try{
			zigbeeMsgReceive = (ZigbeeMsgReceive)msg;
		}catch(Exception e){
			return null;
		}
		
		PortMsgReceivedMsg msg1 = zigbeeMsgReceive.getMsg();
		
		byte cmd0 = msg1.getCmd0();
		byte cmd1 = msg1.getCmd1();
		byte[] data = msg1.getData();
		
		//数据到来
		if(cmd0 == (byte)0x44 && cmd1 == (byte)0x81){
			if(data != null || data.length > 17){
				byte len = data[16];
				short cmd = Tool.bytesToShort(data[17], data[18]);
				//数据上传命令
				if(cmd == CMD_UPLAOD_DATA){
					byte[] data1 = new byte[len-2];
					System.arraycopy(data, 19, data1, 0, len-2);
					return resolveUplaodDataToHttpServerMsg(data1);
				}else if(cmd == CMD_QUERY_IS_ONLINE){
					byte[] NWKAddr = new byte[2];
					NWKAddr[0] = data[4];
					NWKAddr[1] = data[5];
					QueryZigbeeIsOnlineMsg queryZigbeeIsOnlineMsg = new QueryZigbeeIsOnlineMsg();
					queryZigbeeIsOnlineMsg.setSrcAddr(NWKAddr);
					return queryZigbeeIsOnlineMsg;
				}else if(cmd == CMD_OUT_SENSOR_VALUES_COMING && data.length == 39){
					byte bs[] = new byte[20];
					System.arraycopy(data, 19, bs, 0, 20);
					return resolveOutSensorValuesComing(bs);
				}
			}
		}else if(cmd0 == (byte)0x45 && cmd1 == (byte)0xC1){
			//如果当前zigbee作协调器，有其他节点连接到协调器的时候会收到这条信息，包含了其他zigbee的硬件地址和网络地址
				byte[] IEEEAddr = new byte[8];
				System.arraycopy(data, 4, IEEEAddr, 0, 8);
				byte[] NWKAddr = new byte[2];
				NWKAddr[0] = data[2];
				NWKAddr[1] = data[3];
				return new OtherZigbeeConnectedMsg(IEEEAddr, NWKAddr);
		}
		
		return null;
	}
	
	private IMsg resolveOutSensorValuesComing(byte[] data)
	{
		if(data == null || data.length != 20)
			return null;
		
		try{
			OutSensorValuesComingMsg outSensorValuesComingMsg = new OutSensorValuesComingMsg();
			byte bs1[] = new byte[4];
			System.arraycopy(data, 0, bs1, 0, 4);
			outSensorValuesComingMsg.setTemperature(Tool.bytesToFloat(bs1));
			System.arraycopy(data, 4, bs1, 0, 4);
			outSensorValuesComingMsg.setHumidity(Tool.bytesToFloat(bs1));
			System.arraycopy(data, 8, bs1, 0, 4);
			outSensorValuesComingMsg.setHeat(Tool.bytesToFloat(bs1));
			System.arraycopy(data, 12, bs1, 0, 4);
			outSensorValuesComingMsg.setDustConcentration(Tool.bytesToFloat(bs1));
			System.arraycopy(data, 16, bs1, 0, 4);
			outSensorValuesComingMsg.setLightIntensity(Tool.bytesToFloat(bs1));
			return outSensorValuesComingMsg;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	private IMsg resolveUplaodDataToHttpServerMsg(byte[] data){
		if(data == null || data.length<3)
			return null;
		short uploadIndex = (short) (data[0] + data[1] * 256);
		//上传传感器数据
		if(uploadIndex == UPLOAD_DATA_INDEX_SENSOR_VALUE)
		{
			if(data.length != 8)
				return null;
			short deviceID = Tool.bytesToShort(data[2], data[3]);
			byte[] valueBytes = new byte[4];
			System.arraycopy(data, 4, valueBytes, 0, 4);
			float value;
			try {
				value = Tool.bytesToFloat(valueBytes);
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
			UploadDataToHttpServerMsg msg = new UploadDataToHttpServerMsg();
			msg.setSensorValue(value);
			
			if(deviceID == DEVICE_ID_IN_TEMPERATURE_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_IN_TEMPERATURE);
			else if(deviceID == DEVICE_ID_IN_HUMIDITY_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_IN_HUMIDITY);
			else if(deviceID == DEVICE_ID_IN_HEAT_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_IN_HEAT);
			else if(deviceID == DEVICE_ID_OUT_TEMPERATURE_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_OUT_TEMPERATURE);
			else if(deviceID == DEVICE_ID_OUT_HUMIDITY_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_OUT_HUMIDITY);
			else if(deviceID == DEVICE_ID_OUT_HEAT_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_OUT_HEAT);
			else if(deviceID == DEVICE_ID_SOLID_HUMIDITY_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_SOLID_HUMIDITY);
			else if(deviceID == DEVICE_ID_DUST_DENSITY_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_DUST_DENSITY);
			else if(deviceID == DEVICE_ID_LIGHT_INTENSITY_SENSOR)
				msg.setSensorID(UploadDataToHttpServerMsg.SENDOR_ID_LIGHT_INTENSITY);
			else
				return null;
			
			return msg;
		}
		
		return null;
	}

	@Override
	public Object convertMsgSend(IMsg msg) {
		if(msg == null)
			return null;
		if(SendMsgToAppMsg.MSG_NAME.equals(msg.getName())){
			SendMsgToAppMsg sendMsgToAppMsg = (SendMsgToAppMsg)msg;
			byte[] appID = Tool.intTo2Byte(sendMsgToAppMsg.getAppID());
			String cmd = sendMsgToAppMsg.getCmd();
			byte[] data = new byte[6];
			System.out.println(cmd);
			if(cmd.equals("openSwitch1")){
				data[0] = appID[0];
				data[1] = appID[1];
				data[2] = 0x31;
				data[3] = 0x00;
				data[4] = 0x36;
				data[5] = 0x00;
			}else if(cmd.equals("closeSwitch1")){
				data[0] = appID[0];
				data[1] = appID[1];
				data[2] = 0x32;
				data[3] = 0x00;
				data[4] = 0x36;
				data[5] = 0x00;
			}else{
				return null;
			}
			/*
			HashMap<String, Object> params = sendMsgToAppMsg.getParams();
			
			byte[] data = null;
			if(SendMsgToAppMsg.CMD_TEST_CMD.equals(cmd)){
				data = new byte[4];
				data[0] = appID[0];
				data[1] = appID[1];
				data[2] = ZigbeeMsgSend.CMD_TEST_CMD[0];
				data[3] = ZigbeeMsgSend.CMD_TEST_CMD[1];
			}*/

			//Debugger.printBytes(data);
			byte[] dstAddr = getDstAddr(appID);
			if(dstAddr == null)
				return null;
			
			ZigbeeMsgSend zigbeeMsgSend = new ZigbeeMsgSend();
			zigbeeMsgSend.setDstAddr(dstAddr);
			zigbeeMsgSend.setDstEndpoint(cfg.getAppReg().getEndpoint());
			zigbeeMsgSend.setSrcEndpoint(cfg.getAppReg().getEndpoint());
			zigbeeMsgSend.setData(data);
			zigbeeMsgSend.setClusterID(cfg.getClusterID());
			zigbeeMsgSend.setOptions(cfg.getOptions());
			zigbeeMsgSend.setRadius(cfg.getRadius());
			zigbeeMsgSend.setTransID((byte) 0x00);
			return zigbeeMsgSend;
			
		}else if(ResponseToZigbeeOnlineQueryMsg.MSG_NAME.equals(msg.getName())){
			ResponseToZigbeeOnlineQueryMsg responseToZigbeeOnlineQueryMsg = (ResponseToZigbeeOnlineQueryMsg) msg;
			ZigbeeMsgSend zigbeeMsgSend = new ZigbeeMsgSend();
			zigbeeMsgSend.setDstAddr(responseToZigbeeOnlineQueryMsg.getSrcAddr());
			zigbeeMsgSend.setDstEndpoint(cfg.getAppReg().getEndpoint());
			zigbeeMsgSend.setSrcEndpoint(cfg.getAppReg().getEndpoint());
			byte data[] = new byte[2];
			byte[] bs1 = Tool.shortTo2Byte(CMD_RESPONSE_ONLINE);
			data[0] = bs1[0];
			data[1] = bs1[1];
			zigbeeMsgSend.setData(data);
			zigbeeMsgSend.setClusterID(cfg.getClusterID());
			zigbeeMsgSend.setOptions(cfg.getOptions());
			zigbeeMsgSend.setRadius(cfg.getRadius());
			zigbeeMsgSend.setTransID((byte) 0x00);
			return zigbeeMsgSend;
		}else if(OutSensorValuesComingMsg.MSG_NAME.equals(msg.getName())){
			byte[] appID = Tool.shortTo2Byte(APP_ID_LCD);
			byte[]dstAddr = getDstAddr(appID);
			if(dstAddr == null)
				return null;
			
			OutSensorValuesComingMsg outSensorValuesComingMsg = (OutSensorValuesComingMsg) msg;
			ZigbeeMsgSend zigbeeMsgSend = new ZigbeeMsgSend();
			zigbeeMsgSend.setDstAddr(dstAddr);
			zigbeeMsgSend.setDstEndpoint(cfg.getAppReg().getEndpoint());
			zigbeeMsgSend.setSrcEndpoint(cfg.getAppReg().getEndpoint());
			byte data[] = new byte[26];
			byte[] bs1 = Tool.shortTo2Byte(CMD_SEND_MSG_TO_APP);
			data[0] = bs1[0];
			data[1] = bs1[1];
			data[2] = appID[0];
			data[3] = appID[1];
			bs1 = Tool.shortTo2Byte(CMD_OUT_SENSOR_VALUES_COMING);
			data[4] = bs1[0];
			data[5] = bs1[1];
			byte[] bs2 = Tool.floatToBytes(outSensorValuesComingMsg.getTemperature());
			System.arraycopy(bs2, 0, data, 6, 4);
			bs2 = Tool.floatToBytes(outSensorValuesComingMsg.getHumidity());
			System.arraycopy(bs2, 0, data, 10, 4);
			bs2 = Tool.floatToBytes(outSensorValuesComingMsg.getHeat());
			System.arraycopy(bs2, 0, data, 14, 4);
			bs2 = Tool.floatToBytes(outSensorValuesComingMsg.getDustConcentration());
			System.arraycopy(bs2, 0, data, 18, 4);
			bs2 = Tool.floatToBytes(outSensorValuesComingMsg.getLightIntensity());
			System.arraycopy(bs2, 0, data, 22, 4);
			zigbeeMsgSend.setData(data);
			zigbeeMsgSend.setClusterID(cfg.getClusterID());
			zigbeeMsgSend.setOptions(cfg.getOptions());
			zigbeeMsgSend.setRadius(cfg.getRadius());
			zigbeeMsgSend.setTransID((byte) 0x00);
			
			Debugger.printBytes(data);
			return zigbeeMsgSend;
		}
		
		return null;
	}
	
	private byte[] getDstAddr(byte[] appID){
		
		ArrayList<ZigbeeInfo> zigbeeInfoList = cfg.getZigbeeInfoList();
		if(zigbeeInfoList == null || zigbeeInfoList.isEmpty())
			return null;

		for(ZigbeeInfo info : zigbeeInfoList){
			ArrayList<byte[]> appIDList = info.getAppIDList();
			if(info.getNWKAddr() != null && 
					info.getNWKAddr().length == 2 && 
					appIDList != null && 
					appIDList.size()>0){
				for(byte[] id : appIDList){
					if(Arrays.equals(id, appID))
						return info.getNWKAddr();
				}
			}
		}
		
		return null;
	}
	
}
