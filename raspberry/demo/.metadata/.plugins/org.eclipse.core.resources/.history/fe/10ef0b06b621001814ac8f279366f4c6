package bs.support.port;

import java.io.IOException;
import java.io.OutputStream;

import bs.pi.gateway.main.MsgReceivedCallback;
import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import net.sf.json.JSONObject;

public class PortMsgClient {

	private static final String DEFAULT_CFG_PATH = System.getProperty("file.separator")+"portClient.properties";
	private PortClientCfg cfg;
	private PortMsgReceiver receiver;
	private OutputStream portOutStream;
	private MsgReceivedCallback callback;
	
	public PortMsgClient() throws Exception{
		cfg = new PortClientCfg(DEFAULT_CFG_PATH);
	}
	
	public PortMsgClient(String cfgPath) throws Exception{
		cfg = new PortClientCfg(cfgPath);
	}
	
	public void connect () throws Exception{
		
		CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(cfg.getPortName());
        if ( portIdentifier.isCurrentlyOwned() ){
            String errorStr = ">>>MyPortClient.loadOption Error: 串口" + cfg.getPortName() +"被占用";
            throw new Exception(errorStr);
        }
        else{
            CommPort commPort = portIdentifier.open(cfg.getPortName(), 2000);
            
            if ( commPort instanceof SerialPort ){
            	SerialPort serialPort = (SerialPort) commPort;
                serialPort.setSerialPortParams(
                		cfg.getBaudRate(),
                		cfg.getDataBits(),
                		cfg.getStopBits(),
                		cfg.getParity());
                
                receiver = new PortMsgReceiver(serialPort.getInputStream());
                
                portOutStream = serialPort.getOutputStream();
            }
            else{
                String errorStr = ">>>MyPortClient.loadOption Error: "+  cfg.getPortName() +"不是串口";
	            throw new Exception(errorStr);
            }
        }
    }
	
	public void initZigbee(){
		
	}
	
	public void start(){
		receiver.start();
	}
	
	public void stop(){
		receiver.start();
	}
	
	public void close(){
		
	}
	
	public boolean send(byte[] bs) {
		try {
			portOutStream.write(bs);
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public void setMsgReceivedCallback(MsgReceivedCallback callback){
		this.callback = callback;
		receiver.setReceiveCallback(callback);
	}
	
}
