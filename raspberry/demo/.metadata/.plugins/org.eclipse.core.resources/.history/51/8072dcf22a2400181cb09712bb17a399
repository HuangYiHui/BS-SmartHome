package bs.pi.gateway.client.zigbee;

import java.util.HashMap;

import bs.pi.gateway.assist.Tool;
import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;

public class ZigbeeConverter implements IConverter {
	
	@Override
	public HashMap<String, Object> convertMsgReceive(HashMap<String, Object> msg) {
		
		if(msg != null){
			byte cmd0 = (byte) msg.get(AppMsg.K_PORT_CMD0);
			byte cmd1 = (byte) msg.get(AppMsg.K_PORT_CMD1);
			byte[] data = (byte[]) msg.get(AppMsg.K_PORT_DATA);
			
			if(cmd0 == (byte)0x44 && cmd1 == (byte)0x81){
				if(data != null || data.length > 18){
					byte len = data[16];
					byte cmd3 = data[17];
					byte cmd4 = data[18];
					//0x0001为数据上传命令
					if(cmd3 == 0x00 && cmd4 == 0x01 && len == 8){
						byte[] data1 = new byte[6];
						System.arraycopy(data, 19, data1, 0, 6);
						return resolveUplaodDataToHttpServerCMsg(data1);
					}
				}
			}	
		}
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
		return result;
	}
	
	private HashMap<String, Object> resolveUplaodDataToHttpServerCMsg(byte[] data){
		HashMap<String, Object> result = new HashMap<String, Object>();

		int sensorID = data[0]*256 + data[1];
		byte[] valueBytes = new byte[4];
		System.arraycopy(data, 2, valueBytes, 0, 4);
		float sensorValue;
		try {
			sensorValue = Tool.bytesToFloat(valueBytes);
		} catch (Exception e) {
			e.printStackTrace();
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
		
		result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_SUCCESS);
		result.put(AppMsg.K_CMD_NAME, AppMsg.CMD_UPLOAD_DATA_TO_HTTP_SERVER);
		result.put(AppMsg.K_SENSOR_ID, sensorID);
		result.put(AppMsg.K_SENSOR_VALUE, sensorValue);
		
		return result;
	}

	@Override
	public HashMap<String, Object> convertMsgSend(HashMap<String, Object> msg) {
		// TODO Auto-generated method stub
		return null;
	}
	
}
