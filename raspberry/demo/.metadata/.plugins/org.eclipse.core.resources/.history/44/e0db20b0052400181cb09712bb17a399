package bs.pi.gateway.client.http;

import java.util.ArrayList;
import java.util.HashMap;

import com.test.Debugger;

import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.main.IReceivedListener;
import bs.pi.gateway.main.IReceiver;

public class HttpReceiver implements IReceiver {

	public final static String KEY_SUCCESS = "success";
	public final static String KEY_MSG = "msg";
	public final static String KEY_APPID = "appID";
	public final static String KEY_DEVICE_CMD = "deviceCmd";
	public final static String KEY_CMD_PARAMS = "params";
	
	private ArrayList<IReceivedListener> receivedListenerList;
	private HttpClientCfg cfg;
	private IConverter converter;
	private HttpSender sender;
	private Thread rTread = new Thread(new Runnable() {
		@Override
		public void run() {
			while( ! rTread.isInterrupted()){
				if(converter != null && receivedListenerList != null && receivedListenerList.size()>0){
					String url = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/command";
					HttpExecuter executer = new HttpExecuter(url, HttpExecuter.METHOD_GET, cfg.getApiKey(), null);
					HashMap<String, Object> response = null;
					try {
						response = executer.execute();
						response.put(AppMsg.KEY_CMD, AppMsg.CMD_GET_DEVICE_CMD_FROM_HTTP_SERVER_RESPONSE);
						HashMap<String, Object> msg = converter.convertMsgReceive(response);
						Debugger.printHashMap(msg);
						if(msg != null){
							for(IReceivedListener listener : receivedListenerList){
								listener.handleEvent(msg);
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				try {
					Thread.sleep(cfg.getGetCmdTaskInterval());
				} catch (InterruptedException e) {
					break;
				}
			}
		}
	});
	
	public HttpReceiver(HttpClientCfg cfg, IConverter converter){
		this.cfg = cfg;
		this.converter = converter;
	}
	@Override
	public void addReceivedListenr(IReceivedListener listener) {
		// TODO Auto-generated method stub
		if(listener == null)
			return;
		if(receivedListenerList == null)
			receivedListenerList = new ArrayList<IReceivedListener>();
		receivedListenerList.add(listener);
	}

	@Override
	public void start() {
		flush();
		rTread.start();
	}

	@Override
	public void stop() {
		// TODO Auto-generated method stub
		rTread.interrupt();
	}

	@Override
	public void flush() {

	}

}
