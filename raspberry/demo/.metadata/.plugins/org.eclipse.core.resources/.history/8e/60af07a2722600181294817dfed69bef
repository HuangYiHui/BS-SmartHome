package bs.pi.gateway.assist;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;

public class Tool {
	
	private final static String HEX_STR = "0123456789ABCDEF";
	
	private static byte charsToByte(char highC, char lowC) throws Exception{
		highC = Character.toUpperCase(highC);
		lowC = Character.toUpperCase(lowC);
		if(HEX_STR.indexOf(highC) == -1 || HEX_STR.indexOf(lowC) == -1){
			throw new Exception("strToByte error");
		}
		byte high = (byte)((HEX_STR.indexOf(highC))<<4);
		byte low = (byte)HEX_STR.indexOf(lowC);
		byte result = (byte) (high|low);
		return result;
	}
	
	public static byte strToByte(String str) throws Exception{
		if(str.length() < 3 || str.length() > 4 || ! str.startsWith("0x"))
			throw new Exception("strToByte error");
		char c1 = Character.toUpperCase(str.charAt(2));
		if(HEX_STR.indexOf(c1) == -1){
			throw new Exception("strToByte error");
		}
		
		if(str.length() == 3){
			return charsToByte('0', c1);
		}else{
			char c2 = Character.toUpperCase(str.charAt(3));
			if(HEX_STR.indexOf(c2) == -1){
				throw new Exception("strToByte error");
			}
			return charsToByte(c1, c2);
		}
		
	}
	
	public static byte[] strToBytes(String str) throws Exception{
		if(str.length() < 3 || ! str.startsWith("0x"))
			throw new Exception("strToByte error");
		char c1 = Character.toUpperCase(str.charAt(2));
		if(HEX_STR.indexOf(c1) == -1){
			throw new Exception("strToByte error");
		}
		
		String str1 = str.substring(2, str.length());
		int len = str1.length()/2;
		if(str1.length() % 2 == 0){
			byte[] bytes = new byte[len];
			for(int i=0; i<len; i++){
				char hc = str1.charAt(2*len-2*i-2);
				char lc = str1.charAt(2*len-2*i-1);
				bytes[i] = charsToByte(hc, lc);
			}
		}else{
			for(int i=0; i<len+1; i++){
				char hc = '0';
				if(2*len-2*i-1 > 0){
					hc = str1.charAt(2*len-2*i-1);
				}
				char lc = str1.charAt(2*len-2*i);
				System.out.println(hc+","+lc);
				bytes[i] = charsToByte(hc, lc);
			}
		}
		return bytes;
	}
	
	public static float bytesToFloat(byte[] valueBytes) throws Exception{
		if(valueBytes.length != 4)
			throw new Exception("bytesToFloat error");
		
		DataInputStream dis=new DataInputStream(new ByteArrayInputStream(valueBytes));
		float value = dis.readFloat();
		dis.close();
		
		return value;
	}
}
