package bs.pi.gateway.client.zigbee;

import java.util.Arrays;

import com.test.Debugger;

import bs.pi.gateway.main.IConverter;
import bs.pi.gateway.main.ISender;
import bs.pi.gateway.msg.IMsg;
import bs.pi.gateway.msg.PortSendResponseMsg;
import bs.pi.gateway.msg.SendPortMsgMsg;
import bs.pi.gateway.msg.ZigbeeNWKAddrMsg;
import bs.pi.gateway.msg.ZigbeeSendReponseMsg;

public class ZigbeeSender implements ISender {

	private ZigbeeClientCfg cfg;
	private ISender portSender;
	private IConverter converter;
	private byte[] dstAddr1;
	private byte[] dstAddr2;
	
	public ZigbeeSender(ISender portSender, IConverter converter, ZigbeeClientCfg cfg){
		this.portSender = portSender;
		this.converter = converter;
		this.cfg = cfg;
	}
	
	@Override
	public String getName() {
		return ISender.V_SEND_NAME_ZIGBEE_SNEDER;
	}

	@Override
	public IMsg send(IMsg msg) {
		ZigbeeSendReponseMsg zigbeeSendReponseMsg = new ZigbeeSendReponseMsg();
		
		if(ZigbeeNWKAddrMsg.MSG_NAME.equals(msg.getName())){
			ZigbeeNWKAddrMsg msg1 = (ZigbeeNWKAddrMsg)msg;
			byte[] IEEEAddr1 = cfg.getOtherZigbeeIEEEAddr1();
			byte[] IEEEAddr2 = cfg.getOtherZigbeeIEEEAddr2();
			if(Arrays.equals(IEEEAddr1, msg1.getIEEEAddr())){
				dstAddr1 = msg1.getNWKAddr();
			}else if(Arrays.equals(IEEEAddr2, msg1.getIEEEAddr())){
				dstAddr2 = msg1.getNWKAddr();
			}
			zigbeeSendReponseMsg.setSendSuccess(true);
		}else{
			Object obj = converter.convertMsgSend(msg);
			if(obj != null){
				ZigbeeMsgSend zigbeeMsgSend = (ZigbeeMsgSend)obj;
				SendPortMsgMsg portSendMsg = new SendPortMsgMsg();
				portSendMsg.setData(CodeGenerator.packetSend(zigbeeMsgSend));
				PortSendResponseMsg portSendResponseMsg = (PortSendResponseMsg) portSender.send(portSendMsg);
				//·¢ËÍ³É¹¦
				zigbeeSendReponseMsg.setSendSuccess(portSendResponseMsg.getSendSuccess());
			}else{
				zigbeeSendReponseMsg.setSendSuccess(false);
			}
		}
		
		return zigbeeSendReponseMsg;
	}

	@Override
	public void init() {
		searchNWKAddrThread.start();
	}

}
