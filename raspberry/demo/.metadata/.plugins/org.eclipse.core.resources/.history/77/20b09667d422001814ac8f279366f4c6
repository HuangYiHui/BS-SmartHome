package bs.pi.gateway.client.port;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import bs.pi.gateway.client.IClient;
import bs.pi.gateway.client.zigbee.ZigbeeClientCfg;
import bs.pi.gateway.receiver.IReceiver;
import bs.pi.gateway.receiver.PortReceiver;
import bs.pi.gateway.sender.ISender;
import bs.pi.gateway.sender.PortSender;

public class PortClient implements IClient{

	public static final String DEFAULT_CFG_PATH = System.getProperty("user.dir")+System.getProperty("file.separator")+"portClientCfg.properties";
	private String cfgPath;
	private PortClientCfg cfg;
	private SerialPort serialPort;
	private PortSender sender;
	private PortReceiver receiver;
	
	public void setCfgPath(String path){
		this.cfgPath = path;
	}
	
	@Override
	public void init() throws Exception {
		if(cfgPath == null)
			cfgPath = DEFAULT_CFG_PATH;
		cfg = new PortClientCfg(cfgPath);
	}

	@Override
	public void start() throws Exception {
		CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(cfg.getPortName());
        if ( portIdentifier.isCurrentlyOwned() ){
            String errorStr = "port:" + cfg.getPortName() +" was occupied";
            throw new Exception(errorStr);
        }
        else{
            CommPort commPort = portIdentifier.open(cfg.getPortName(), 2000);
            if ( commPort instanceof SerialPort ){
            	serialPort = (SerialPort) commPort;
                serialPort.setSerialPortParams(cfg.getBaudRate(), cfg.getDataBits(), cfg.getStopBits(), cfg.getParity());
                sender = new PortSender(serialPort.getOutputStream());
                receiver = new PortReceiver(serialPort.getInputStream());
            }
            else{
                String errorStr = cfg.getPortName() +"not a serial port";
	            throw new Exception(errorStr);
            }
        }
	}

	@Override
	public void destroy() {
		receiver.stop();
		serialPort.close();
	}

	@Override
	public ISender getSender() {
		return sender;
	}

	@Override
	public IReceiver getReceiver() {
		return receiver;
	}

}
