package bs.pi.gateway.client.http;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;

import com.test.Debugger;

import bs.pi.gateway.Msg.IMsg;
import bs.pi.gateway.Msg.UploadDataToHttpServerMsg;
import bs.pi.gateway.main.AppMsg;
import bs.pi.gateway.main.IConverter;

public class HttpConverter implements IConverter {	
	private HttpClientCfg cfg;
	
	public void setHttpClientCfg(HttpClientCfg cfg){
		this.cfg = cfg;
	}
	
	@Override
	public HashMap<String, Object> convertMsgReceive(HashMap<String, Object> msg) {
		HashMap<String, Object> result = new HashMap<String, Object>();
		if(msg == null){
			result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
			return result;
		}
		//获取设备命令回复
		if(HttpMsg.V_CMD_NAME_GET_DEVICE_CMD.equals(msg.get(HttpMsg.K_CMD_NAME)) &&
				HttpMsg.V_SUCCESS_TRUE == (boolean) msg.get(HttpMsg.K_SUCCESS)){
			String cmdStr = (String) msg.get(HttpMsg.K_MSG);
			JSONObject JsonCmd = JSONObject.fromObject(cmdStr.substring(1, cmdStr.length()-1));
			//给应用发送消息命令
			if(HttpMsg.V_CMD_NAME_SEND_CMD_TO_APP.equals(JsonCmd.get(HttpMsg.K_DEVICE_CMD))){
				result.put(AppMsg.K_CMD_NAME, AppMsg.V_CMD_NAME_SEND_CMD_TO_APP);
				result.put(AppMsg.K_APP_ID, JsonCmd.getString(HttpMsg.K_APP_ID));
				JSONObject jsonParam = JSONObject.fromObject(JsonCmd.getString(HttpMsg.K_CMD_PARAMS));
				result.put(AppMsg.K_CMD_PARAMS, jsonParam);
				result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_SUCCESS);
				return result;
			}
		}
		result.put(IConverter.K_CONVERT_STATUS, IConverter.V_CONVERT_STATUS_FAIL);
		return result;
	}

	@Override
	public Object convertMsgSend(IMsg msg) {
		if(msg == null)
			return null;
		
		HttpMsg httpMsg = new HttpMsg();
		
		if(UploadDataToHttpServerMsg.MSG_NAME.equals(msg.getName())){
			UploadDataToHttpServerMsg msg1 = null;
			try{
				msg1 = (UploadDataToHttpServerMsg) msg;
			}catch(Exception e){
				return null;
			}
			String url = cfg.getServiceUrl()+"/device/"+cfg.getDeviceID()+"/sensor/"+msg1.getSensorID()+"/datapoint";
			List<NameValuePair> paramList = new ArrayList<NameValuePair>();
			paramList.add(new BasicNameValuePair(HttpMsg.K_VALUE, ""+msg1.getSensorValue()));
			UrlEncodedFormEntity params = new UrlEncodedFormEntity(paramList, Consts.UTF_8);
			
			httpMsg.setUrl(url);
			httpMsg.setMethod(HttpMsg.METHOD_POST);
			httpMsg.setApiKey(cfg.getApiKey());
			httpMsg.setParams(params);
			
			return httpMsg;	
		}
		return null;
	}
}
