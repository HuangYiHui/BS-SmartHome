package bs.pi.gateway.client.http;

import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import net.sf.json.JSONObject;

import org.apache.http.annotation.NotThreadSafe;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import bs.pi.gateway.main.AppMsg;

public class HttpExecuter {
	
	private String url;
	private int method;
	private String apiKey;
	private UrlEncodedFormEntity params;
	
	HttpExecuter(String url, int method, String apiKey, UrlEncodedFormEntity params){
		this.url = url;
		this.method = method;
		this.apiKey = apiKey;
		this.params = params;
	}
	
	public HashMap<String, Object> execute(){
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		
		HttpUriRequest request = null;
		
		try{
			if(HttpMsg.METHOD_GET == method){
				request = getGetRequest();
			}else if(HttpMsg.METHOD_POST == method){
				request = getPostRequest();
			}else if(HttpMsg.METHOD_POST == method){
				request = getPutRequest();
			}else if(HttpMsg.METHOD_POST == method){
				request = getDeleteRequest();
			}else{
				result.put(HttpMsg.K_SEND_STATUS, HttpMsg.V_SEND_STATUS_FAIL);
				return result;
			}
		}catch(Exception e){
			e.printStackTrace();
			result.put(HttpMsg.K_SEND_STATUS, HttpMsg.V_SEND_STATUS_FAIL);
			return result;
		}
		
		CloseableHttpClient httpClient = HttpClients.createDefault();
		CloseableHttpResponse response = null;
		JSONObject jsonResponse = null;
		
		try{
			response = httpClient.execute(request);
			try {
				jsonResponse = JSONObject.fromObject(EntityUtils.toString(response.getEntity()));
			} finally {
                response.close();
            }
		}catch(Exception e){
			e.printStackTrace();
			result.put(HttpMsg.K_SEND_STATUS, HttpMsg.V_SEND_STATUS_FAIL);
			return result;
		}finally{
			try {
				httpClient.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	
		if(jsonResponse != null){
			Set<Map.Entry<String, Object>> resultSet = jsonResponse.entrySet();
			for(Map.Entry<String, Object> entry : resultSet){
				result.put(entry.getKey(), entry.getValue());
			}
			result.put(HttpMsg.K_SEND_STATUS, HttpMsg.V_SEND_STATUS_SUCCESS);
			return result;
		}else{
			result.put(HttpMsg.K_SEND_STATUS, HttpMsg.V_SEND_STATUS_FAIL);
			return result;
		}
	}
	
	private HttpUriRequest getGetRequest() throws Exception{
		String paramStr = "";
		if(params != null){
			paramStr = EntityUtils.toString(params);
		}
		HttpGet httpGet = new HttpGet(url+"?"+paramStr);
		httpGet.addHeader("APIKEY", apiKey);
		return httpGet;
	}
	
	private HttpUriRequest getPostRequest() throws Exception{
		HttpPost httpPost = new HttpPost(url);
		httpPost.addHeader("APIKEY", apiKey);
		if(params != null){
			httpPost.setEntity(params);
		}
		return httpPost;
	}
	
	private HttpUriRequest getPutRequest() throws Exception{
		HttpPut httpPut = new HttpPut(url);
		httpPut.addHeader("APIKEY", apiKey);
		if(params != null){
			httpPut.setEntity(params);
		}
		
		return httpPut;
	}
	
	private HttpUriRequest getDeleteRequest() throws Exception{
		HttpDeleteWithBody httpDelete = new HttpDeleteWithBody(url);
		httpDelete.addHeader("APIKEY", apiKey);
		if(params != null){
			httpDelete.setEntity(params);
		}
		return httpDelete;
	}
	
	@NotThreadSafe
	public class HttpDeleteWithBody extends HttpEntityEnclosingRequestBase {
	    public static final String METHOD_NAME = "DELETE";
	    public String getMethod() { return METHOD_NAME; }
	    public HttpDeleteWithBody(final String uri) {
	        super();
	        setURI(URI.create(uri));
	    }
	    public HttpDeleteWithBody(final URI uri) {
	        super();
	        setURI(uri);
	    }
	    public HttpDeleteWithBody() { super(); }
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
	}

	public void setParams(UrlEncodedFormEntity params) {
		this.params = params;
	}
	
	public void setMethod(String method) {
		this.method = method;
	}
}
